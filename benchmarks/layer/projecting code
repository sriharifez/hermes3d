// H1 projections
template<typename Real, typename Scalar>
Scalar H1projection_biform(int n, double *wt, Func<Real> *u, Func<Real> *v, Geom<Real> *e, ExtData<Scalar> *ext)
{
  Scalar result = 0;
  for (int i = 0; i < n; i++)
    result += wt[i] * (u->val[i] * v->val[i] + u->dx[i] * v->dx[i] + u->dy[i] * v->dy[i]);
  return result;
}

template<typename Real, typename Scalar>
Scalar H1projection_liform(int n, double *wt, Func<Real> *v, Geom<Real> *e, ExtData<Scalar> *ext)
{
  Scalar result = 0;
  for (int i = 0; i < n; i++)
    result += wt[i] * (ext->fn[0]->val[i] * v->val[i] + ext->fn[0]->dx[i] * v->dx[i] + ext->fn[0]->dy[i] * v->dy[i]);
  return result;
}

void LinSystem::project_global_n(int proj_norm, int n, ...)
{
  if (!have_spaces)
    error("You have to init_spaces() before using project_global_n().");
  if (n != wf->neq || n > 10)
    error("Wrong number of functions in project_global_n().");

  int i;
  MeshFunction* fn[10];
  Solution* result[10];

  va_list ap;
  va_start(ap, n);
  for (i = 0; i < n; i++)
    fn[i] = va_arg(ap, MeshFunction*);
  for (i = 0; i < n; i++)
    result[i] = va_arg(ap, Solution*);
  va_end(ap);

  WeakForm* wf_orig = wf;

  WeakForm wf_proj(n);
  wf = &wf_proj;
  int found = 0;
  if (proj_norm == 1) {
    found = 1;
    for (i = 0; i < n; i++)
    {
      wf->add_biform(i, i, H1projection_biform<double, scalar>, H1projection_biform<Ord, Ord>);
      wf->add_liform(i, H1projection_liform<double, scalar>, H1projection_liform<Ord, Ord>, H2D_ANY, 1, fn[i]);
    }
  }
  if (!found) error("Wrong projection type in project_global_n().");

  want_dir_contrib = true;
  LinSystem::assemble();
  LinSystem::solve(n, result[0], result[1], result[2], result[3], result[4],
                      result[5], result[6], result[7], result[8], result[9]);
  want_dir_contrib = false;

  wf = wf_orig;
  wf_seq = -1;
}

